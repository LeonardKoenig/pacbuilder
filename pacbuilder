#!/bin/bash
# PacBuilder
# By Andrea Cimitan

function environment()
{
	AUTHOR_NAME="Andrea Cimitan"
	AUTHOR_EMAIL="andrea.cimitan@gmail.com"
	COMMAND_BIN="pacbuilder"
	COMMAND_NAME="PacBuilder"
	LICENSE="GPLv3"
	TMP_PATH=/tmp/${COMMAND_BIN}/build
	LOG_FILE_PACKAGES=/var/log/${COMMAND_BIN}-packages.log
	ABS_REPOS_URL="http://repos.archlinux.org/viewvc.cgi"

	if [ "$NO_COLOR" != "TRUE" ]; then
		COLOR_0M="\033[1;0m"
		COLOR_1M="\033[1;1m"
		COLOR_31M="\033[1;31m"
		COLOR_32M="\033[1;32m"
		COLOR_33M="\033[1;33m"
		COLOR_34M="\033[1;34m"
	fi

	mkdir -p ${TMP_PATH}
}

function check_uid()
{
	if [ $UID != 0 ]; then
		printf "$COMMAND_NAME requires root permissions to run\n"
		exit
	fi
}

function print_title()
{
	if [ "$NO_COLOR" != "TRUE" ]; then
		printf "${COLOR_34M}-------------------------------\n"
		printf "${COLOR_33M} $COMMAND_NAME${COLOR_0M}, by $AUTHOR_NAME ${COLOR_34M}\n"
		printf "${COLOR_34M}-------------------------------\n"
		printf "${COLOR_0M}\n"
	else
		printf "\033[1;0m-------------------------------\n"
		printf " $COMMAND_NAME, by $AUTHOR_NAME\n"
		printf "\033[1;0m-------------------------------\n"
		printf "\n"
	fi
}

function print_usage()
{
	printf "A tool to massively recompile packages from sources\n"
	printf "It currently fetches both ABS and AUR\n"
	printf "\n"
	printf "USAGE:\n"
	printf "  $COMMAND_BIN --option1 --option2 --option3 ...\n"
	printf "\n"
	printf "OPTIONS:\n"
	printf "  General:\n"
	printf "    --help       print this help\n"
	printf "    --gccinfo    print current compilation flags\n"
	printf "    --nocolor    don't use any color\n"
	printf "    --verbose    print makepkg output\n"
	printf "  Target type:\n"
	printf "    --deps       recompile deps\n"
	printf "    --explicit   recompile explicitely installed packages\n"
	printf "    --world      recompile both deps and explicit\n"
	printf "  Target repository:\n"
	printf "    --core       recompile packages in core\n"
	printf "    --extra      recompile packages in extra\n"
	printf "    --testing    recompile packages in testing\n"
	printf "    --unstable   recompile packages in unstable\n"
	printf "    --community  recompile packages in community\n"
	printf "    --aur        recompile packages in aur\n"
}

function print_repo()
{
	printf "${COLOR_1M}Repo:${COLOR_0M} $1\n"
}

function print_type()
{
	printf "${COLOR_1M}Type:${COLOR_0M} $1\n"
}

function print_gcc_info()
{
	source /etc/makepkg.conf

	printf "${COLOR_1M}Carch:${COLOR_0M} ${CARCH}\n"
	printf "${COLOR_1M}Chost:${COLOR_0M} ${CHOST}\n"
	printf "${COLOR_1M}Cflags:${COLOR_0M} ${CFLAGS}\n"
	printf "${COLOR_1M}Cxxflags:${COLOR_0M} ${CXXFLAGS}\n"
}

function add_carch()
{
	unset arch
	source ./PKGBUILD &> /dev/null
	if [ -z "$arch" ]; then
		source /etc/makepkg.conf
		[ -z "$CARCH" ] && CARCH="i686"
		sed -i "/^build/iarch=('$CARCH')\n" ./PKGBUILD
	fi
}

function get_pkginfo()
{
	unset arch pkgname pkgver pkgrel
	source ./PKGBUILD &> /dev/null
	source /etc/makepkg.conf
	[ -z "$CARCH" ] && CARCH="i686"
	arch=$CARCH
}

function build_packages()
{
	rm -rf ${TMP_PATH}/*
	ERROR_PACKAGES=""
	PACKAGES=`cat ${LOG_FILE_PACKAGES}`
	NUM_PACKAGES=`cat ${LOG_FILE_PACKAGES} | wc -l`
	CURRENT_INDEX=1
	for CURRENT_PACKAGE in $PACKAGES; do
		printf "${COLOR_32M}==>${COLOR_0M}"
		printf "${COLOR_1M} Building ${CURRENT_PACKAGE}"
		printf "${COLOR_0M} [package $CURRENT_INDEX of $NUM_PACKAGES] ..."
		if [ "`pacman -Qd $CURRENT_PACKAGE | awk -F" " '{print $1}'`" != "" ]; then
			EXTRA_PACMAN_OPTIONS="--asdeps"
		fi
		mkdir -p ${TMP_PATH}/${CURRENT_PACKAGE}
		cd ${TMP_PATH}/${CURRENT_PACKAGE}
		yaourt -G --noconfirm --nocolor $CURRENT_PACKAGE &> /dev/null
		add_carch
		get_pkginfo
		if [ "$VERBOSE" != "TRUE" ]; then
			makepkg --asroot --noconfirm &> /dev/null
		else
			printf "\n"
			if [ "$NO_COLOR" != "TRUE" ]; then
				makepkg --asroot --noconfirm
			else
				makepkg --asroot --noconfirm --nocolor
			fi
			printf "${COLOR_32M}==>${COLOR_0M}"
			printf "${COLOR_1M} Installing $pkgname-$pkgver-$pkgrel-$arch.pkg.tar.gz"
			printf "${COLOR_0M} [package $CURRENT_INDEX of $NUM_PACKAGES] ..."
		fi
		pacman -U --noconfirm $EXTRA_PACMAN_OPTIONS $pkgname-$pkgver-$pkgrel-$arch.pkg.tar.gz &> /dev/null
		CHECK_INSTALL=`grep upgraded /var/log/pacman.log | tail -n1 /var/log/pacman.log | grep $CURRENT_PACKAGE | wc -l`
		if [ "$CHECK_INSTALL" == "1" ]; then
			rm -rf ${TMP_PATH}/${CURRENT_PACKAGE}
			sed -i '/'${CURRENT_PACKAGE}'/d' ${LOG_FILE_PACKAGES}
			printf "${COLOR_32M} installed!${COLOR_0M}\n"
		else
			ERROR_PACKAGES=${ERROR_PACKAGES}$CURRENT_PACKAGE" "
			printf "${COLOR_31M} error!${COLOR_0M}\n"
		fi
		(( CURRENT_INDEX++ ))
	done
	printf "${COLOR_31M}==> $(gettext "ERROR:")${COLOR_0M}"
	printf "${COLOR_1M} I was unable to install these packages: $ERROR_PACKAGES${COLOR_0M}\n"
}

function match_repository()
{
	JOINT_PACKAGES=""
	CURRENT_INDEX=0
	for CURRENT_PACKAGE in $@; do
		REPOSITORY=`LANG=C pacman -Si $CURRENT_PACKAGE 2> /dev/null | grep -m1 Repository | awk -F": " '{ print $2 }'`
		if [ "$REPOSITORY" == "" ]; then
			REPOSITORY="aur"
		fi
		for CURRENT_REPOSITORY in $REPOSITORY; do
			for CURRENT_TARGET_REPOSITORY in $TARGET_REPOSITORY; do
				if [ "$CURRENT_REPOSITORY" == "$CURRENT_TARGET_REPOSITORY" ]; then
					JOINT_PACKAGES=${JOINT_PACKAGES}$CURRENT_PACKAGE"\n"
				fi
			done
		done
	done
	echo -e $JOINT_PACKAGES > ${LOG_FILE_PACKAGES}
}

function resume()
{
	if [ -f ${LOG_FILE_PACKAGES} ]; then
		printf "${COLOR_33M}==> $(gettext "ATTENTION:")${COLOR_0M}"
		printf "${COLOR_1M} Previous build detected. Do you want to resume? (no/yes): ${COLOR_0M}"
		read RESUME_ANSWER
		printf "\n"
		if [ "$RESUME_ANSWER" == "yes" ]; then
			printf "Resuming...\n"
			build_packages
			exit
		fi
	fi
}

function build()
{
	if [ "$TARGET_REPOSITORY" != "" ]; then
		print_repo "$TARGET_REPOSITORY\n"
		printf "Fetching repositories, this may take a long time..."
		match_repository $PACKAGES
		printf "${COLOR_32M} done!\n"
		printf "\n"
	else
		print_repo "build from every repository\n"
	fi
	build_packages
}

function deps()
{
	pacman -Qd | awk -F" " '{print $1}' > ${LOG_FILE_PACKAGES}
	PACKAGES=`pacman -Qd | awk -F" " '{print $1}'`
	if [ "$DONE_DEPS" != "TRUE" ]; then
		print_type "deps packages"
		build
	fi
	DONE_DEPS="TRUE"
}

function explicit()
{
	pacman -Qe | awk -F" " '{print $1}' > ${LOG_FILE_PACKAGES}
	PACKAGES=`pacman -Qe | awk -F" " '{print $1}'`
	EXTRA_YAOURT_OPTIONS=""
	if [ "$DONE_EXPLICIT" != "TRUE" ]; then
		print_type "explicit packages"
		build
	fi
	DONE_EXPLICIT="TRUE"
}

function world()
{
	pacman -Q | awk -F" " '{print $1}' > ${LOG_FILE_PACKAGES}
	PACKAGES=`pacman -Q | awk -F" " '{print $1}'`
	if [ "$DONE_WORLD" != "TRUE" ]; then
		print_type "both deps and explicit packages"
		build
	fi
	DONE_DEPS="TRUE"
	DONE_EXPLICIT="TRUE"
	DONE_WORLD="TRUE"
}

function read_flags()
{
	if [ "$TYPES_ENABLED" == "" ] && [ "$REPOSITORY_ENABLED" != "" ]; then
		printf "No type specified, assuming world...\n\n"
		ENABLED_TYPES="world"
		sleep 1
	fi
	if [ "$TYPES_ENABLED" != "" ] && [ "$REPOSITORY_ENABLED" == "" ]; then
		printf "No repository specified, build all...\n\n"
		sleep 1
	fi
	for EXTRA_TYPE in $ENABLED_TYPES; do
		if [ "$EXTRA_TYPE" == "deps" ]; then
			deps
		elif [ "$EXTRA_TYPE" == "explicit" ]; then
			explicit
		elif [ "$EXTRA_TYPE" == "world" ]; then
			world
		fi
	done
}

function add_repository()
{
	ALREADY_ADDED="FALSE"
	for ADDED_REPOSITORY in $TARGET_REPOSITORY; do
		if [ "$ADDED_REPOSITORY" == "$1" ]; then
			ALREADY_ADDED="TRUE"
		fi
	done
	if [ "$ALREADY_ADDED" != "TRUE" ]; then
		TARGET_REPOSITORY=${TARGET_REPOSITORY}$1" "
		REPOSITORY_ENABLED="TRUE"
	fi
}

function add_type()
{
	ALREADY_ADDED="FALSE"
	for ADDED_TYPE in $ENABLED_TYPES; do
		if [ "$ADDED_TYPE" == "$1" ]; then
			ALREADY_ADDED="TRUE"
		fi
	done
	if [ "$ALREADY_ADDED" != "TRUE" ]; then
		ENABLED_TYPES=${ENABLED_TYPES}$1" "
		TYPES_ENABLED="TRUE"
	fi
}

function check_nocolor()
{
	if [ -z "$1" ]; then
		NO_COLOR="TRUE"
	fi
	for EXTRA_FLAG in $@; do
		if [ "$EXTRA_FLAG" == "--nocolor" ]; then
			NO_COLOR="TRUE"
		fi
	done
}

function check_args()
{
	if [ -z "$1" ]; then
		print_usage
	fi
	for EXTRA_FLAG in $@; do
		if [ "$EXTRA_FLAG" == "--core" ]; then
			add_repository "core"
		elif [ "$EXTRA_FLAG" == "--extra" ]; then
			add_repository "extra"
		elif [ "$EXTRA_FLAG" == "--testing" ]; then
			add_repository "testing"
		elif [ "$EXTRA_FLAG" == "--unstable" ]; then
			add_repository "unstable"
		elif [ "$EXTRA_FLAG" == "--community" ]; then
			add_repository "community"
		elif [ "$EXTRA_FLAG" == "--aur" ]; then
			add_repository "aur"
		fi
	done
	for EXTRA_FLAG in $@; do
		if [ "$EXTRA_FLAG" == "--deps" ]; then
			add_type "deps"
		elif [ "$EXTRA_FLAG" == "--explicit" ]; then
			add_type "explicit"
		elif [ "$EXTRA_FLAG" == "--world" ]; then
			add_type "world"
		elif [ "$EXTRA_FLAG" == "--help" ]; then
			print_usage
		elif [ "$EXTRA_FLAG" == "--gccinfo" ]; then
			print_gcc_info
		elif [ "$EXTRA_FLAG" == "--verbose" ]; then
			VERBOSE="TRUE"
		fi
	done
}

function main()
{
	check_nocolor $@
	environment
	check_uid
	print_title
	check_args $@
	resume
	read_flags
}

main $@
